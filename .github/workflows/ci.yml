name: GitHub CI

on:
-   push
-   pull_request

jobs:
    windowsBuild:
        name: Windows Build
        runs-on: windows-2019
        strategy:
            fail-fast: false
            matrix:
                CONFIGURATION:
                -   Debug
                -   Release

                TARGET_CPU:
                -   x86
                -   amd64

                LLVM_VERSION:
                -   llvm-3.4.2
                -   llvm-8.0.1

        steps:
        -   name: Checkout repo
            uses: actions/checkout@v4
            with:
                submodules: true

        -   name: Install
            continue-on-error: true
            shell: cmd
            run: |
                set CONFIGURATION=${{matrix.CONFIGURATION}}
                set LLVM_VERSION=${{matrix.LLVM_VERSION}}
                call jancy\ci\github-actions\set-env.bat msvc16 ${{matrix.TARGET_CPU}}
                call jancy\ci\github-actions\install-windows.bat

        -   name: Setup NASM
            uses: ilammy/setup-nasm@v1
            if: ${{ matrix.TARGET_CPU == 'amd64' }}

        -   name: Build and test
            shell: cmd
            run: |
                set CONFIGURATION=${{matrix.CONFIGURATION}}
                set LLVM_VERSION=${{matrix.LLVM_VERSION}}
                set THIS_DIR=%CD%
                set THIS_DIR_CMAKE=%THIS_DIR:\=/%

                call jancy\ci\github-actions\set-env.bat msvc16 ${{matrix.TARGET_CPU}}
                call axl\ci\github-actions\build-lua.bat

                mkdir build
                cd build
                cmake .. %CMAKE_CONFIGURE_FLAGS% || exit
                cmake --build . %CMAKE_BUILD_FLAGS% || exit
                ctest --output-on-failure -C %CONFIGURATION% || exit

    linuxBuild:
        name: Linux Build
        runs-on: ubuntu-22.04
        strategy:
            fail-fast: false
            matrix:
                CONFIGURATION:
                -   Debug
                -   Release

                TARGET_CPU:
                -   x86
                -   amd64

                LLVM_VERSION:
                -   llvm-12
                -   llvm-14

        steps:
        -   name: Checkout repo
            uses: actions/checkout@v4
            with:
                submodules: true

        -   name: Install
            shell: bash
            run: |
                export TARGET_CPU=${{matrix.TARGET_CPU}}
                export LLVM_VERSION=${{matrix.LLVM_VERSION}}
                source ./jancy/ci/github-actions/install-linux.sh

        -   name: Build and test
            shell: bash
            run: |
                THIS_DIR=$(pwd)
                export CC=$(which ${{matrix.COMPILER}})
                export CXX=$(which ${{matrix.COMPILER}}++)

                mkdir build
                cd build
                cmake .. -DTARGET_CPU=${{matrix.TARGET_CPU}} -DCMAKE_BUILD_TYPE=${{matrix.CONFIGURATION}}
                make
                ctest --output-on-failure

                cmake . -DJANCY_TEST_JIT_KIND=--orc -DJANCY_TEST_DEBUG_INFO=
                if [[ ${{matrix.LLVM_VERSION}} != "llvm-9" ]]; then ctest --output-on-failure; fi

    macOsBuild:
        name: macOS Build
        runs-on: macos-13
        strategy:
            fail-fast: false
            matrix:
                CONFIGURATION:
                -   Debug
                -   Release

                LLVM_VERSION:
                -   llvm@15
                -   llvm@17

        steps:
        -   name: Checkout repo
            uses: actions/checkout@v4
            with:
                submodules: true

        -   name: Install
            shell: bash
            run: |
                export LLVM_VERSION=${{matrix.LLVM_VERSION}}
                source ./jancy/ci/github-actions/install-osx.sh

        -   name: Build and test
            shell: bash
            run: |
                THIS_DIR=$(pwd)

                mkdir build
                cd build
                cmake .. -DCMAKE_BUILD_TYPE=${{matrix.CONFIGURATION}}
                make
                ctest --output-on-failure

                cmake . -DJANCY_TEST_JIT_KIND=--orc -DJANCY_TEST_DEBUG_INFO=
                ctest --output-on-failure
